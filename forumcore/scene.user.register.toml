[pipelines.register]
metadata.version = "1.0"
## Declare the variables that are used by the pipeline
#parameter.inputs = [
#    "user"
#]
#parameter.outputs = [
#    "user"
#]
## Declare the operations that are used by the pipeline
#parameter.pre_outputs = [
#    { "@remove" = "user" }
#]
## local variables defines variables used within the pipeline
## It will not be exposed to the FlowModel(shared)
#parameter.local_variables = [
#    { "temp/local/parent_post_id" = "string" }
#]
pipeline.source_connectors = [
    # Source connector will accept inbound traffic and convert it to FlowModel then invoke the following pipeline steps
    # All the connectors here will trigger the same pipeline, which means one pipeline will allow several source connectors
    # @connector should be used to define the type of connector
    # @mapping should also be used to define the FlowModel mapper, otherwise no data will be mapped for the pipeline
    # Other key-value pairs are options passing to the connector
    # Note: the option key should follow the format of path format
    # Note2: the connector will also share the same FlowModel
    [
        ["@connector", "http_rest"],
        ["http.listen", "0.0.0.0:8081"],
        ["http.method", "post"],
        ["http.path", "/user/register"],
        # Source connector mapping have four parameters: @mapping operation, req, res, err_simple
        ["@mapping", [
            # connector mapping for both source and target connector
            # FlowModel <-> Connector Model
            # Note: do not rely on the order of the mapping list
            # Note2: recommended not to duplicate mappings
            ["http", "", [
                ["body", "user", [
                    ["username", "username"],
                    ["password", "password"],
                    ["nickname", "nickname"],
                ]]
            ]]
        ], [
            # connector mapping for both source and target connector and also for both directions of in and out
            # FlowModel <-> Connector Model
            # Note: do not rely on the order of the mapping list
            # Note2: recommended not to duplicate mappings
            ["", "http", [
                ["user", "body", [
                    ["user_id", "user_id"],
                ]]
            ]]
        ], [
            # connector mapping for source connector only to handle breaking error
            { "error_key" = "check_key_user_exists", "error_message" = "http/body/message", "http/status" = "201" },
            { "error_key" = "check_missing_field", "error_message" = "http/body/message", "http/status" = "400" },
        ]],
    ],
]
pipeline.steps = [
    # Each step should have @flow as key with flow name as value
    # Other key-value pairs are options passing to the flow generator
    # Note: the option key should follow the format of path format
    #
    # For using target connector(which supports both invoking flow and triggering event)
    # '&' should be used at the beginning of the flow name
    #
    # Invoke Flow(e.g. subflow/module)
    [
        ["@flow", "register_validation"],
        ["example.parameter1", "value1"],
    ],
    [
        ["@flow", "&database_postgres"],
        ["database.connect_string", "configure-static://forum_database"],
        ["database.operation", "query"],
        ["database.sql", "select user_id from \"user\" where username = $1"],
        # Target connector mapping have three parameters: @mapping operation, req, res
        ["@mapping", [
            ["user", "", [
                ["username", "sql.args.0"],
            ]]
        ], [
            ["", "user", [
                ["sql.result.0", "user_id"],
            ]]
        ]],
    ],
    [
        ["@flow", "register_existing_check"],
    ],
    [
        ["@flow", "register_generate_user_data"],
    ],
    # target connector
    # '&' should be used as prefix to indicate that the flow with the corresponding name is a connector
    [
        ["@flow", "&database_postgres"],
        ["database.connect_string", "configure-static://forum_database"],
        ["database.operation", "exec"],
        ["database.sql", "insert into \"user\" (user_id, username, password, nickname, time_created, time_updated) values ($1, $2, $3, $4, $5, $6)"],
        ["@mapping", [
            ["user", "", [
                ["user_id", "sql.args.0"],
                ["username", "sql.args.1"],
                ["password", "sql.args.2"],
                ["nickname", "sql.args.3"],
                ["time_created", "sql.args.4"],
                ["time_updated", "sql.args.5"],
            ]]
        ], [
            ["", "debugging", [
                ["", "database", [
                    ["sql.affected_row_count", "affected_row_count"],
                ]]
            ]]
        ]],
    ],
    # Trigger Event
    # Meaning this step should not have outputs or at least the outputs will be discarded
    # And this step can be invoked in parallel to the other steps
    [
        ["#flow", "send_register_notification"],
    ],
]

[flows.register_existing_check]
in = [
    ["user", "", [
        ["user_id", "user_id"],
    ]]
]
flow.steps = [
    { "@check_empty_break" = ["user_id", "check_key_user_exists", "(displayed) username exists"] }
]

[flows.register_validation]
# flowmodels -> local parameters
# parameters that are not existing here will be ignored
# default value may be given based on the type of left if the left value not exist
# Note: Execution order is not defined. Don't rely on the order.
# Note2: recommended not to duplicate mappings
in = [
    ["user", "", [
        ["user_id", "user_id"],
        ["username", "username"],
        ["password", "password"],
        ["nickname", "nickname"],
    ]]
]
pre_out = [
    # "@remove" command will remove the given value from the flowmodels
    # Note: Execution order is not defined. Don't rely on the order.
    #["@remove-object", "user"]
]
# local parameters -> flowmodels
# possible paths: "user/username", "user/phone", "user/phone[1]" which are ALL valid paths(not valid path of definition)
# default value may be  based on the type of right if the left value not exist
# Note: Execution order is not defined. Don't rely on the order.
# Note2: recommended not to duplicate mappings
out = [
    ["", "user", [
        ["user_id", "user_id"],
        ["username", "username"],
        ["nickname", "nickname"],
        ["time_created", "time_created"],
        ["time_updated", "time_updated"],
    ]]
]
flow.steps = [
    # invoke function - "@function" = [ parameter list ]
    { "@check_not_blank_break" = ["username", "check_missing_field", "username is missing"] },
    { "@check_not_blank_break" = ["password", "check_missing_field", "password is missing"] },
    { "@check_not_blank_break" = ["nickname", "check_missing_field", "nickname is missing"] },
    # invoke user defined function
    #{ "#print_obj" = ["user_id"] },
    #{ "#print_obj" = ["username"] },
    #{ "#print_obj" = ["nickname"] },
    #{ "#print_obj" = ["password"] },
]

[flows.register_generate_user_data]
in = [
    ["user", "", [
        ["user_id", "user_id"],
        ["password", "password"],
    ]]
]
out = [
    ["", "user", [
        ["user_id", "user_id"],
        ["password", "password"],
        ["time_created", "time_created"],
        ["time_updated", "time_updated"],
    ]]
]
flow.steps = [
    { "@uuid" = ["user_id"] },
    { "@crypto_bcrypt" = ["password"] },
    { "#print_obj" = ["user_id"] },
    { "#print_obj" = ["password"] },
    { "@set_current_unix_timestamp" = ["time_created"] },
    { "@set_current_unix_timestamp" = ["time_updated"] },
]

[flows.send_register_notification]
in = [
    ["debugging", "", [
        ["database", "", [
            ["affected_row_count", "affected_row_count"],
        ]]
    ]]
]
pre_out = []
out = []
flow.steps = [
    { "#print_obj" = ["affected_row_count"] },
    #{ "#panic" = ["demo panic"] }
]
