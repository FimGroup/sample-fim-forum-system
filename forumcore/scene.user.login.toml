[pipelines.user_login]
metadata.version = "1.0"
pipeline.source_connectors = [
    [
        ["@connector", "http_rest"],
        ["@mapping", "http_inst"],
        ["http.listen", "0.0.0.0:8081"],
        ["http.method", "post"],
        ["http.path", "/user/login"],
    ],
]
pipeline.steps = [
    [
        ["@flow", "login_validation"],
    ],
    [
        ["@flow", "&database_postgres"],
        ["@mapping", "query_user"],
        ["database.connect_string", "postgres://admin:admin@192.168.1.111:25432/forum"],
        ["database.operation", "query"],
        ["database.sql", "select user_id, password from \"user\" where username = $1"],
    ],
    [
        ["@flow", "login_user_existing_check"],
    ],
    [
        ["@flow", "login_check_password"],
    ],
]
connector_mapping.http_inst.req = [
    ["user/username", "http/body/username"],
    ["user/password", "http/body/password"],
]
connector_mapping.http_inst.res = [
    ["user/user_id", "http/body/user_id"],
]
connector_mapping.http_inst.err_simple = [
    { "error_key" = "check_missing_user", "error_message" = "http/body/message", "http/status" = "404" },
    { "error_key" = "check_mismatch_password", "error_message" = "http/body/message", "http/status" = "401" },
    { "error_key" = "check_parameter_failed", "error_message" = "http/body/message", "http/status" = "400" },
]
connector_mapping.query_user.req = [
    ["user/username", "sql.args.0"],
]
connector_mapping.query_user.res = [
    ["user/user_id", "sql.result.0"],
    ["database/user/password", "sql.result.1"],
]

[flows.login_validation]
in = [
    ["user/username", "username"],
    ["user/password", "password"],
]
flow.steps = [
    { "@check_not_blank_break" = ["username", "check_parameter_failed", "username is empty"] },
    { "@check_not_blank_break" = ["password", "check_parameter_failed", "password is empty"] },
]

[flows.login_user_existing_check]
in = [
    ["user/user_id", "user_id"],
]
flow.steps = [
    { "@check_not_blank_break" = ["user_id", "check_missing_user", "user not found"] }
]

[flows.login_check_password]
in = [
    ["user/password", "user_input_password"],
    ["database/user/password", "database_password"],
]
flow.steps = [
    { "@assign" = ["constant_true", true] },
    { "@crypto_bcrypt_verify" = ["database_password", "user_input_password", "isMatch"] },
    { "#print_obj" = ["isMatch"] },
    { "#print_obj" = ["constant_true"] },
    { "@case-false" = ["isMatch"], "@check_always_break" = ["check_mismatch_password", "password wrong"] }
]
